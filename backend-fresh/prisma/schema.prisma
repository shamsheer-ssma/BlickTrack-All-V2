// BlickTrack Enterprise Schema - Full Implementation
// Comprehensive multi-tenant cybersecurity platform with RBAC+ABAC
//
// FEATURE LICENSING & ACCESS CONTROL SYSTEM:
// ==========================================
//
// 1. PLAN-BASED FEATURES (PlanFeature table):
//    - Each plan (TRIAL, PROFESSIONAL, ENTERPRISE, GUEST) defines available features
//    - Features have configuration (basic vs enhanced) and user limits per tenant
//    - Example: PROFESSIONAL plan allows "threat_modeling" for max 50 users
//
// 2. USER-LEVEL ACCESS CONTROL (UserFeatureAccess table):
//    - Tracks which specific users have access to which features
//    - Enforces per-feature user limits defined in PlanFeature
//    - Supports temporary access, expiration, and admin overrides
//    - Example: John.doe@boeing.com has access to "threat_modeling" until 2025-12-31
//
// 3. GRANULAR LICENSING LOGIC:
//    - Tenant has 1000 employees but only 50 threat modeling licenses
//    - Admin can grant/revoke individual user access within limits
//    - System prevents exceeding maxUsers limit per feature
//    - Platform admin can override limits for specific tenants
//
// 4. APPLICATION IMPLEMENTATION:
//    - Check UserFeatureAccess.isActive AND within limits before allowing feature use
//    - Update usage statistics (lastUsedAt, usageCount) on feature access  
//    - Background jobs handle license expiration and cleanup
//    - Admin UI shows current usage vs limits per feature

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================================
// ENTERPRISE MODELS - FULL IMPLEMENTATION
// ===============================================================

model Tenant {
  id     String  @id @default(uuid())
  name   String  @unique
  slug   String  @unique
  domain String? @unique

  // Subscription & Licensing
  planId String?
  plan   FeaturePlan? @relation(fields: [planId], references: [id])

  // Limits (overrides plan defaults)
  maxUsers    Int?
  maxProjects Int?

  // Status
  status   TenantStatus @default(TRIAL)
  isActive Boolean      @default(true)

  // Trial management
  isTrial        Boolean   @default(true)
  trialExpiresAt DateTime?

  // Security settings
  mfaRequired    Boolean @default(false)
  passwordPolicy Json    @default("{\"minLength\": 8, \"requireSpecialChar\": true}")
  sessionTimeout Int     @default(480) // minutes

  // Compliance
  complianceFrameworks String[] @default([])
  dataResidency        String? // "US", "EU", "APAC"

  // API & Integration
  apiQuotaDaily Int     @default(10000)
  webhookUrl    String?

  // Generic settings field for backward compatibility
  settings Json @default("{}")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  users                   User[]
  departments             Department[]
  projects                Project[]
  roles                   Role[]
  assignments             PrincipalAssignment[]
  auditLogs               AuditLog[]
  userFeatureAccess       UserFeatureAccess[]
  projectHierarchyPerms   ProjectHierarchyPermission[]
  configuration           TenantConfiguration?
  organizationalUnits     OrganizationalUnit[]
  businessEntities        BusinessEntity[]
  entityAccess            EntityAccess[]
  securityProjects        SecurityProject[]

  @@index([slug])
  @@index([status])
  @@map("tenants")
}

// Tenant Configuration - Industry-specific setup and terminology
model TenantConfiguration {
  id       String @id @default(uuid())
  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Industry Configuration
  industryType    String  @default("TECHNOLOGY") // AEROSPACE, FINANCIAL, HEALTHCARE, etc.
  organizationType String @default("PRODUCT_BASED") // PRODUCT_BASED, PROJECT_BASED, SERVICE_BASED

  // Terminology Customization
  productTerm    String @default("Product")     // "Product", "Solution", "Service"
  projectTerm    String @default("Project")     // "Project", "Engagement", "Initiative"
  portfolioTerm  String @default("Portfolio")   // "Portfolio", "Division", "Program"
  workstreamTerm String @default("Workstream")  // "Workstream", "Task", "Activity"

  // Default Hierarchy Structure
  defaultHierarchy Json @default("[]") // ["PORTFOLIO", "PROGRAM", "PRODUCT", "PROJECT"]
  maxHierarchyLevels Int @default(5)

  // Security Templates
  securityFrameworks String[] @default([]) // ["NIST", "ISO27001", "SOX"]
  defaultRiskLevel   RiskLevel @default(MEDIUM)

  // UI/UX Configuration
  theme            String @default("corporate") // "corporate", "aerospace", "financial"
  primaryColor     String @default("#2563eb")
  logoUrl          String?
  customCssUrl     String?

  // Compliance Settings
  requiresApproval     Boolean @default(false)
  auditRetentionDays   Int     @default(2555) // 7 years default
  encryptionRequired   Boolean @default(true)

  // Integration Settings
  ssoEnabled           Boolean @default(false)
  adIntegrationEnabled Boolean @default(false)
  apiAccessEnabled     Boolean @default(true)
  
  // Feature Flags - Control tenant-specific features
  enableRegistration   Boolean @default(true)   // Allow new user registration
  enable2FA            Boolean @default(false)  // Require two-factor authentication
  enableLandingPage    Boolean @default(true)   // Show landing page (false = direct to login)
  enableDarkMode       Boolean @default(true)   // Allow dark mode toggle
  
  // SSO Configuration (when ssoEnabled = true)
  ssoProvider          String? // "azure", "okta", "google", "saml"
  ssoClientId          String? // OAuth Client ID
  ssoTenantId          String? // For Azure AD
  ssoIssuerUrl         String? // For SAML
  ssoMetadataUrl       String? // For SAML metadata
  
  // Generic settings field for backward compatibility
  settings Json @default("{}")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenant_configurations")
}

// Organizational Units - Flexible structure for any organization type
model OrganizationalUnit {
  id          String  @id @default(uuid())
  name        String
  description String?
  
  // Hierarchy Support
  parentId String?
  parent   OrganizationalUnit? @relation("OrgUnitHierarchy", fields: [parentId], references: [id])
  children OrganizationalUnit[] @relation("OrgUnitHierarchy")
  
  level    Int     @default(0)
  path     String? // "/Corporate/Defense/Aerospace" 
  isRoot   Boolean @default(false)
  isLeaf   Boolean @default(true)

  // Organization Properties
  unitType     String // "DIVISION", "DEPARTMENT", "TEAM", "GROUP"
  costCenter   String?
  budgetCode   String?
  managerId    String?
  manager      User?   @relation("OrgUnitManager", fields: [managerId], references: [id])

  // Tenant Context
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Geographic/Location Info
  location     String?
  timeZone     String @default("UTC")
  country      String?
  region       String?

  // Metadata
  metadata Json @default("{}")
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  users           User[]           @relation("UserOrgUnit")
  businessEntities BusinessEntity[]

  @@unique([tenantId, name, parentId])
  @@index([parentId])
  @@index([level])
  @@index([unitType])
  @@map("organizational_units")
}

// Business Entity - Universal container for Products/Projects/Services
model BusinessEntity {
  id          String  @id @default(uuid())
  name        String
  description String?

  // Entity Classification
  entityType      BusinessEntityType @default(PRODUCT) // PRODUCT, PROJECT, SERVICE, SOLUTION
  category        String?            // "Internal", "Client", "R&D", "Compliance"
  businessValue   String?            // "Revenue", "Cost_Reduction", "Compliance", "Innovation"

  // Hierarchy Support (can contain other entities)
  parentId String?
  parent   BusinessEntity? @relation("EntityHierarchy", fields: [parentId], references: [id])
  children BusinessEntity[] @relation("EntityHierarchy")
  
  level    Int     @default(0)
  path     String? // "/Digital_Banking/Mobile_App/Authentication"
  isRoot   Boolean @default(false)
  isLeaf   Boolean @default(true)

  // Organization Assignment
  orgUnitId String?
  orgUnit   OrganizationalUnit? @relation(fields: [orgUnitId], references: [id])

  // Ownership
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  ownerId String?
  owner   User?   @relation("EntityOwner", fields: [ownerId], references: [id])

  // Lifecycle Management
  status       EntityStatus @default(PLANNING)
  phase        String?      // "Discovery", "Development", "Testing", "Production"
  priority     Priority     @default(MEDIUM)
  
  // Timeline
  plannedStartDate DateTime?
  actualStartDate  DateTime?
  plannedEndDate   DateTime?
  actualEndDate    DateTime?

  // Financial
  budgetAllocated  Decimal?
  budgetSpent      Decimal?
  currency         String   @default("USD")

  // Risk & Compliance
  riskLevel            RiskLevel @default(MEDIUM)
  complianceFrameworks String[]  @default([])
  regulatoryScope      String[]  @default([]) // "PCI", "HIPAA", "SOX", "GDPR"

  // Metadata & Tags
  metadata Json     @default("{}")
  tags     String[] @default([])
  
  // External References
  externalId       String? // Integration with ERP, CRM systems
  contractNumber   String?
  projectCode      String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  securityProjects SecurityProject[]
  entityAccess     EntityAccess[]

  @@unique([tenantId, name, parentId])
  @@index([entityType])
  @@index([status])
  @@index([ownerId])
  @@index([orgUnitId])
  @@index([parentId])
  @@map("business_entities")
}

// Entity Access Control - Who can access which business entities
model EntityAccess {
  id           String @id @default(uuid())
  
  entityId     String
  entity       BusinessEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // User or Role access
  userId       String?
  user         User?   @relation(fields: [userId], references: [id])
  
  roleId       String?
  role         Role?   @relation(fields: [roleId], references: [id])

  // Access Level
  accessLevel  String // "read", "write", "admin", "owner"
  canDelegate  Boolean @default(false)
  
  // Tenant context
  tenantId     String
  tenant       Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Audit Trail
  grantedById  String?
  grantedBy    User?    @relation("AccessGrantedBy", fields: [grantedById], references: [id])
  grantedAt    DateTime @default(now())
  
  expiresAt    DateTime?
  isActive     Boolean  @default(true)

  @@unique([entityId, userId, accessLevel])
  @@unique([entityId, roleId, accessLevel])
  @@index([userId])
  @@index([roleId])
  @@map("entity_access")
}

model Department {
  id          String  @id @default(uuid())
  name        String
  description String?

  // Hierarchy
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children Department[] @relation("DepartmentHierarchy")

  // Metadata
  costCenter String?
  manager    String? // User ID

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users       User[]
  projects    Project[]
  assignments PrincipalAssignment[]

  @@unique([tenantId, name])
  @@index([parentId])
  @@map("departments")
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  firstName   String
  lastName    String
  displayName String?
  avatar      String?
  title       String?
  phone       String?

  // Authentication
  password               String?   // For compatibility with auth service
  passwordHash           String?
  isEmailVerified        Boolean   @default(false)
  isVerified             Boolean   @default(false) // For auth service compatibility
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpiresAt DateTime?
  name                   String?   // For auth service compatibility

  // Status
  status              UserStatus @default(PENDING)
  isActive            Boolean    @default(true)
  lastLoginAt         DateTime?
  lastLoginIp         String?    // IP address of last login
  failedLogins        Int        @default(0)
  failedLoginAttempts Int        @default(0) // For auth service compatibility
  lockedUntil         DateTime?
  passwordChangedAt   DateTime?  // When password was last changed

  // Role (for backward compatibility)
  role UserRole @default(VIEWER)

  // MFA
  mfaEnabled     Boolean  @default(false)
  mfaSecret      String?
  mfaBackupCodes String[]

  // Multi-tenant context
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // User type
  userType UserType @default(REGULAR)

  // Preferences
  preferences Json   @default("{}")
  timezone    String @default("UTC")
  locale      String @default("en-US")

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  auditLogs        AuditLog[]
  sessions         UserSession[]
  featureAccess    UserFeatureAccess[]
  verificationTokens VerificationToken[]

  // Content relations
  threatModels          ThreatModel[]
  ownedProjects         Project[]                     @relation("ProjectOwner")
  projectHierarchyPerms ProjectHierarchyPermission[]
  
  // Organizational relations
  managedOrgUnits       OrganizationalUnit[] @relation("OrgUnitManager")
  orgUnit               OrganizationalUnit?  @relation("UserOrgUnit", fields: [orgUnitId], references: [id])
  orgUnitId             String?
  
  // Business entity relations
  ownedEntities         BusinessEntity[] @relation("EntityOwner")
  entityAccess          EntityAccess[]
  grantedAccess         EntityAccess[]   @relation("AccessGrantedBy")
  
  // Activity & Security Project relations
  createdTemplates      ActivityTemplate[] @relation("TemplateCreatedBy")
  ownedSecurityProjects SecurityProject[]  @relation("SecurityProjectOwner")

  @@index([tenantId])
  @@index([email])
  @@index([status])
  @@map("users")
}

model UserSession {
  id           String @id @default(uuid())
  userId       String
  sessionToken String @unique

  // Session details
  ipAddress  String?
  userAgent  String?
  location   String? // Geo location
  deviceType String? // "desktop", "mobile", "tablet"

  // Status
  isActive  Boolean  @default(true)
  expiresAt DateTime

  // Security
  isSecure    Boolean @default(false) // HTTPS
  mfaVerified Boolean @default(false)

  // Timestamps
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("user_sessions")
}

model Principal {
  id   String        @id @default(uuid())
  type PrincipalType

  // References
  userId    String?
  groupId   String?
  serviceId String? // For service principals

  // Metadata
  displayName String

  // Relations
  assignments PrincipalAssignment[]

  @@index([type])
  @@map("principals")
}

model Role {
  id          String  @id @default(uuid())
  name        String
  description String?

  // Role type
  type     RoleType @default(CUSTOM)
  category String? // "security", "admin", "analyst"

  // Tenant context
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Built-in roles
  isBuiltIn Boolean @default(false)
  isSystem  Boolean @default(false)

  // Permissions
  permissions RolePermission[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignments           PrincipalAssignment[]
  projectHierarchyPerms ProjectHierarchyPermission[]
  entityAccess          EntityAccess[]

  @@unique([name, tenantId])
  @@index([type])
  @@map("roles")
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique // "microsoft.security/threatModels/read"
  description String?

  // Permission structure
  provider String // "microsoft.security", "blicktrack.core"
  resource String // "threatModels", "users", "projects"
  action   String // "read", "write", "delete", "execute"

  // Metadata
  category  String? // "data", "control", "admin"
  riskLevel RiskLevel @default(LOW)

  // Relations
  rolePermissions RolePermission[]

  @@index([provider, resource])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  // Permission details for RBAC compatibility
  resource ResourceType?
  action   ActionType?
  effect   String @default("ALLOW") // ALLOW or DENY

  // Permission state
  granted Boolean @default(true)

  // ABAC conditions
  conditions Json? // {"timeRange": "business-hours", "ipRange": "internal"}

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model PrincipalAssignment {
  id          String @id @default(uuid())
  principalId String
  roleId      String

  // Scope definition (Azure-style)
  scope String // "/tenants/{id}", "/tenants/{id}/departments/{id}", "/tenants/{id}/projects/{id}"

  // Multi-tenant context
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Department scope (optional)
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  // Assignment metadata
  assignedBy String // User ID who made the assignment
  reason     String? // Justification

  // Temporal constraints
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?

  // Status
  isActive Boolean @default(true)

  // ABAC conditions
  conditions Json? // {"location": "office", "timeRange": "business-hours"}

  // Relations
  principal Principal @relation(fields: [principalId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([principalId, roleId, scope])
  @@index([tenantId])
  @@index([scope])
  @@map("principal_assignments")
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String?

  // HIERARCHICAL STRUCTURE SUPPORT
  parentId String?
  parent   Project? @relation("ProjectHierarchy", fields: [parentId], references: [id])
  children Project[] @relation("ProjectHierarchy")
  
  // Hierarchy metadata
  level       Int     @default(0) // 0=root, 1=child, 2=grandchild, etc.
  path        String? // "/root/child/grandchild" for quick queries
  isRoot      Boolean @default(false)
  isLeaf      Boolean @default(true)
  
  // Project type and classification
  type           ProjectType @default(THREAT_MODELING)
  classification String? // "internal", "client", "compliance"
  
  // Hierarchy-specific types
  hierarchyType ProjectHierarchyType @default(PROJECT) // PROJECT, PRODUCT, PORTFOLIO, PROGRAM

  // Status
  status   ProjectStatus @default(DRAFT)
  priority Priority      @default(MEDIUM)

  // Ownership
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])

  ownerId String?
  owner   User?   @relation("ProjectOwner", fields: [ownerId], references: [id])

  // Compliance & Risk (can inherit from parent)
  complianceFrameworks String[]  @default([])
  riskLevel            RiskLevel @default(MEDIUM)
  inheritCompliance    Boolean   @default(true) // inherit from parent?

  // Project timeline
  startDate DateTime?
  endDate   DateTime?

  // Metadata
  metadata Json     @default("{}")
  tags     String[] @default([])

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  threatModels      ThreatModel[]
  hierarchyPerms    ProjectHierarchyPermission[]

  @@unique([tenantId, name, parentId]) // Allow same name under different parents
  @@index([status])
  @@index([departmentId])
  @@index([parentId])
  @@index([level])
  @@index([hierarchyType])
  @@map("projects")
}

// Project Hierarchy Permissions - handles access control across hierarchy levels
model ProjectHierarchyPermission {
  id String @id @default(uuid())

  // Project hierarchy reference
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // User/Role assignment
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  
  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  // Permission details
  permission   String // "read", "write", "admin", "manage_children"
  isInherited  Boolean @default(false) // inherited from parent?
  inheritLevel Int?    // from which level inherited (for tracking)

  // Tenant context
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, userId, permission])
  @@unique([projectId, roleId, permission])
  @@index([userId])
  @@index([roleId])  
  @@index([isInherited])
  @@map("project_hierarchy_permissions")
}

model ThreatModel {
  id          String  @id @default(uuid())
  name        String
  description String?
  version     String  @default("1.0")

  // Model data
  methodology String @default("STRIDE") // "STRIDE", "PASTA", "OCTAVE"
  canvasData  Json? // React Flow diagram data
  assets      Json   @default("[]")
  threats     Json   @default("[]")
  mitigations Json   @default("[]")

  // Status & Classification
  status         ThreatModelStatus @default(DRAFT)
  riskLevel      RiskLevel         @default(MEDIUM)
  classification String? // "confidential", "internal"

  // Ownership
  tenantId  String
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  // Review & Approval
  reviewStatus ReviewStatus @default(PENDING)
  reviewedBy   String?
  reviewedAt   DateTime?
  reviewNotes  String?

  // Compliance
  complianceNotes Json @default("{}")

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  @@index([status])
  @@index([projectId])
  @@map("threat_models")
}

// ===============================================================
// FEATURE MANAGEMENT & LICENSING
// ===============================================================

model FeaturePlan {
  id          String   @id @default(uuid())
  name        PlanTier @unique
  displayName String
  description String?

  // Pricing
  price         Decimal? @db.Decimal(10, 2)
  currency      String   @default("USD")
  billingPeriod String   @default("monthly") // "monthly", "annual"

  // Limits
  maxUsers        Int @default(10)
  maxProjects     Int @default(5)
  maxThreatModels Int @default(20)
  storageLimit    Int @default(1024) // MB

  // Status
  isActive Boolean @default(true)
  isPublic Boolean @default(true)

  // Relations
  features PlanFeature[]
  tenants  Tenant[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feature_plans")
}

model Feature {
  id          String  @id @default(uuid())
  key         String  @unique // "advanced_threat_modeling", "compliance_reports"
  name        String
  description String?

  // Feature metadata
  category FeatureCategory
  type     FeatureType     @default(BOOLEAN)

  // Default configuration
  defaultEnabled Boolean @default(false)
  defaultConfig  Json    @default("{}")

  // Relations
  planFeatures   PlanFeature[]
  userAccess     UserFeatureAccess[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("features")
}

// ===============================================================
// FEATURE ACCESS CONTROL & LICENSING
// ===============================================================

model PlanFeature {
  id        String @id @default(uuid())
  planId    String
  featureId String

  // Feature configuration per plan
  enabled Boolean @default(true)
  config  Json    @default("{}") // Feature-specific configuration (tier, templates, etc.)
  limits  Json?   @default("{}") // Technical limits {"api_calls": 1000, "storage": 100}

  // USER LICENSING CONTROL
  // Controls how many users can access this feature within a tenant
  maxUsers     Int? // Max users allowed for this feature (null = unlimited)
  currentUsers Int  @default(0) // Current active users (auto-calculated)
  
  // APPLICATION LOGIC:
  // 1. When user requests feature access, check: currentUsers < maxUsers
  // 2. If limit reached, deny access or show upgrade prompt
  // 3. When access granted, increment currentUsers
  // 4. When access revoked, decrement currentUsers
  // 5. Background job can recalculate currentUsers from UserFeatureAccess

  // Relations
  plan    FeaturePlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
  @@map("plan_features")
}

model UserFeatureAccess {
  id        String @id @default(uuid())
  userId    String
  featureId String
  tenantId  String

  // Access control and audit
  isActive    Boolean   @default(true)  // Can be revoked without deleting record
  grantedAt   DateTime  @default(now()) // When access was granted
  grantedBy   String?   // Admin user ID who granted access (null = auto-granted)
  revokedAt   DateTime? // When access was revoked
  revokedBy   String?   // Admin user ID who revoked access
  
  // Optional expiration (for trial features, temporary access)
  expiresAt   DateTime? // When access expires (null = permanent)
  
  // Audit fields
  lastUsedAt  DateTime? // Last time user actually used this feature
  usageCount  Int       @default(0) // How many times feature was used
  
  // APPLICATION LOGIC:
  // 1. Before granting access: Check PlanFeature.maxUsers limit
  // 2. On grant: Create record with isActive=true, increment PlanFeature.currentUsers
  // 3. On revoke: Set isActive=false, revokedAt=now(), decrement currentUsers
  // 4. On feature use: Update lastUsedAt, increment usageCount
  // 5. Expired access: Background job sets isActive=false for expired records
  // 6. License enforcement: Only check records where isActive=true AND (expiresAt IS NULL OR expiresAt > now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, featureId]) // One access record per user per feature
  @@index([tenantId, featureId]) // Fast lookup for tenant feature usage
  @@index([isActive, expiresAt]) // Fast lookup for active licenses
  @@map("user_feature_access")
}

// ===============================================================
// COMPLIANCE & AUDIT
// ===============================================================

model ComplianceFramework {
  id          String  @id @default(uuid())
  name        String  @unique // "NIST-CSF", "ISO27001", "SOC2"
  version     String
  displayName String
  description String?

  // Framework metadata
  category  String // "security", "privacy", "operational"
  authority String? // "NIST", "ISO", "AICPA"

  // Status
  isActive Boolean @default(true)

  // Relations
  requirements ComplianceRequirement[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("compliance_frameworks")
}

model ComplianceRequirement {
  id          String @id @default(uuid())
  frameworkId String
  code        String // "AC-1", "SI-2", "CC6.1"
  title       String
  description String

  // Requirement details
  category  String // "Access Control", "System Integrity"
  priority  Priority  @default(MEDIUM)
  riskLevel RiskLevel @default(MEDIUM)

  // Implementation guidance
  guidance   String?
  references String[] @default([])

  // Relations
  framework ComplianceFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  @@unique([frameworkId, code])
  @@index([category])
  @@map("compliance_requirements")
}

model AuditLog {
  id String @id @default(uuid())

  // Event details
  eventType  AuditEventType
  action     String // "user.login", "role.assigned", "threat_model.created"
  resource   String? // "user", "role", "threat_model", "project"
  resourceId String?

  // Context
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Request context
  sessionId String?
  ipAddress String?
  userAgent String?
  location  String? // Geo location

  // Change tracking
  oldValues Json?
  newValues Json?

  // Risk & Classification
  riskLevel RiskLevel     @default(LOW)
  severity  AuditSeverity @default(INFO)

  // Additional context
  metadata Json?
  tags     String[] @default([])

  // Status
  isAnomaly  Boolean   @default(false)
  isReviewed Boolean   @default(false)
  reviewedBy String?
  reviewedAt DateTime?

  // Timestamps
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) // For auth service compatibility
  
  // HTTP Request details
  method String? // HTTP method
  endpoint String? // API endpoint
  success Boolean @default(true) // For login tracking
  errorMessage String? // Error message for failed operations

  @@index([tenantId, timestamp])
  @@index([userId, timestamp])
  @@index([eventType])
  @@index([resource, resourceId])
  @@index([riskLevel])
  @@map("audit_logs")
}

// Activity Templates - Pre-built security activity templates
model ActivityTemplate {
  id          String @id @default(uuid())
  name        String
  description String?
  
  // Template Classification
  category      ActivityCategory @default(THREAT_MODELING)
  subcategory   String?         // "API Security", "Mobile Security", etc.
  complexity    Complexity      @default(MEDIUM)
  estimatedHours Int            @default(8)
  
  // Framework Alignment
  frameworks    String[]        @default([]) // ["NIST", "OWASP", "ISO27001"]
  standards     String[]        @default([]) // ["PCI-DSS", "HIPAA", "SOX"]
  
  // Template Content
  objectives    String[]        @default([]) // List of objectives
  deliverables  String[]        @default([]) // Expected deliverables
  steps         Json            @default("[]") // Detailed step-by-step instructions
  
  // Requirements
  skillsRequired     String[]   @default([]) // Required skills
  toolsRequired      String[]   @default([]) // Required tools
  prerequisiteChecks Json       @default("[]") // Prerequisite validations
  
  // Industry Applicability
  industries         String[]   @default([]) // "AEROSPACE", "FINANCIAL", "HEALTHCARE"
  entityTypes        String[]   @default([]) // "PRODUCT", "PROJECT", "SERVICE"
  
  // Risk & Compliance
  riskLevel          RiskLevel  @default(MEDIUM)
  complianceEvidence Boolean    @default(false) // Generates compliance evidence?
  
  // Template Metadata
  version      String   @default("1.0")
  isPublic     Boolean  @default(true)  // Available to all tenants
  isActive     Boolean  @default(true)
  
  // Authoring Info
  createdById  String?
  createdBy    User?    @relation("TemplateCreatedBy", fields: [createdById], references: [id])
  
  // Usage Statistics
  usageCount   Int      @default(0)    // How many times used
  avgRating    Decimal? @db.Decimal(3, 2) // Average user rating
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  securityProjects SecurityProject[]
  
  @@index([category])
  @@index([complexity])
  @@index([isPublic, isActive])
  @@map("activity_templates")
}

// Security Project - Instantiated security activities from templates
model SecurityProject {
  id          String @id @default(uuid())
  name        String
  description String?
  
  // Template Reference
  templateId    String?
  template      ActivityTemplate? @relation(fields: [templateId], references: [id])
  
  // Business Context
  entityId      String
  entity        BusinessEntity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  
  // Project Details
  status        SecurityProjectStatus @default(NOT_STARTED)
  priority      Priority              @default(MEDIUM)
  riskLevel     RiskLevel             @default(MEDIUM)
  
  // Ownership & Assignment
  tenantId      String
  tenant        Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  ownerId       String?
  owner         User?  @relation("SecurityProjectOwner", fields: [ownerId], references: [id])
  
  assignedTo    String[]              @default([]) // User IDs assigned to this project
  
  // Timeline
  plannedStartDate   DateTime?
  actualStartDate    DateTime?
  plannedEndDate     DateTime?
  actualEndDate      DateTime?
  estimatedHours     Int?
  actualHours        Int?
  
  // Progress Tracking
  completionPercent  Int               @default(0) // 0-100
  milestones         Json              @default("[]") // Milestone tracking
  checklistItems     Json              @default("[]") // Checklist progress
  
  // Results & Deliverables  
  findings           Json              @default("[]") // Security findings
  recommendations    Json              @default("[]") // Recommendations
  deliverables       Json              @default("[]") // Completed deliverables
  
  // Evidence & Documentation
  evidenceFiles      String[]          @default([]) // File paths/URLs
  reportGenerated    Boolean           @default(false)
  reportUrl          String?
  
  // Compliance & Audit
  complianceFrameworks String[]        @default([])
  auditEvidence        Json            @default("[]") // Audit trail
  approvalRequired     Boolean         @default(false)
  approvedBy           String?         // User ID who approved
  approvedAt           DateTime?
  
  // Custom Fields (configurable per tenant)
  customFields       Json              @default("{}")
  
  // Metadata
  tags               String[]          @default([])
  metadata           Json              @default("{}")
  
  // Timestamps
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  
  @@unique([tenantId, name])
  @@index([status])
  @@index([priority])
  @@index([ownerId])
  @@index([entityId])
  @@index([templateId])
  @@map("security_projects")
}

// Verification Token model for email verification and password reset
model VerificationToken {
  id         String    @id @default(uuid())
  token      String    @unique
  expires    DateTime
  identifier String?   // Email or other identifier for the token
  
  // Purpose
  type   TokenType @default(EMAIL_VERIFICATION)
  userId String?
  user   User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Email for verification tokens
  email String?
  
  // Usage tracking
  used   Boolean @default(false)
  usedAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("verification_tokens")
}



// ===============================================================
// ENUMS
// ===============================================================

enum UserRole {
  SUPER_ADMIN          // Platform super admin
  TENANT_ADMIN         // Tenant administrator
  PRODUCT_OWNER        // Product owner
  SECURITY_LEAD        // Security team lead
  SECURITY_ANALYST     // Security analyst
  VIEWER               // Read-only access
  PLATFORM_ADMIN       // Platform administrator
  END_USER             // End user
  COLLABORATOR         // Collaborator
  DEPARTMENT_HEAD      // Department head
  PROJECT_MANAGER      // Project manager
  SECURITY_OFFICER     // Security officer
}

enum TokenType {
  REFRESH              // Refresh token
  ACCESS               // Access token
  EMAIL_VERIFICATION   // Email verification token
  PASSWORD_RESET       // Password reset token
  INVITATION           // User invitation token
}

enum ScopeType {
  GLOBAL              // Global scope
  PLATFORM            // Platform scope
  TENANT              // Tenant scope
  DEPARTMENT          // Department scope
  PROJECT             // Project scope
  USER                // User scope
}

enum ResourceType {
  TENANT              // Tenant resource
  USER                // User resource
  PROJECT             // Project resource
  ROLE                // Role resource
  PERMISSION          // Permission resource
  AUDIT_LOG           // Audit log resource
}

enum ActionType {
  CREATE              // Create action
  READ                // Read action
  UPDATE              // Update action
  DELETE              // Delete action
  MANAGE              // Manage action (full control)
  ALL                 // All actions (wildcard)
}

enum TenantStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
  LOCKED
}

enum UserType {
  REGULAR
  ADMIN
  SERVICE_ACCOUNT
  EXTERNAL
  GUEST
}

enum PrincipalType {
  USER
  GROUP
  SERVICE_PRINCIPAL
  MANAGED_IDENTITY
}

enum RoleType {
  BUILT_IN
  CUSTOM
  SYSTEM
}

enum RiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectType {
  THREAT_MODELING
  SECURITY_ASSESSMENT
  COMPLIANCE_AUDIT
  INCIDENT_RESPONSE
  SECURITY_TRAINING
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum ProjectHierarchyType {
  PROJECT      // Individual project (leaf level)
  PRODUCT      // Product containing multiple projects
  PORTFOLIO    // Portfolio of products/projects
  PROGRAM      // Program management level
  INITIATIVE   // Strategic initiative level
  WORKSTREAM   // Sub-project workstream
}

enum Priority {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ThreatModelStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
  DEPRECATED
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum FeatureCategory {
  PRODUCT_SECURITY
  IT_SECURITY
  OT_SECURITY
}

enum PlanTier {
  TRIAL        // Trial users - limited time access, basic features
  PROFESSIONAL // Paid tier - full features for growing teams
  ENTERPRISE   // Full-featured solution for large organizations
  GUEST        // Unlimited time access but only basic features
}

enum FeatureType {
  BOOLEAN
  NUMERIC
  STRING
  JSON
}

enum AuditEventType {
  AUTHENTICATION
  AUTHORIZATION
  DATA_ACCESS
  DATA_MODIFICATION
  CONFIGURATION_CHANGE
  SECURITY_EVENT
  COMPLIANCE_EVENT
  SYSTEM_EVENT
}

enum AuditSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum BusinessEntityType {
  PRODUCT       // Traditional product
  PROJECT       // Time-bound project
  SERVICE       // Ongoing service
  SOLUTION      // Packaged solution
  INITIATIVE    // Strategic initiative
  ENGAGEMENT    // Client engagement
  WORKSTREAM    // Sub-project workstream
}

enum EntityStatus {
  PLANNING      // Initial planning phase
  APPROVED      // Approved for execution
  IN_PROGRESS   // Currently being worked on
  ON_HOLD       // Temporarily paused
  COMPLETED     // Successfully completed
  CANCELLED     // Cancelled before completion
  ARCHIVED      // Archived for historical purposes
}

enum ActivityCategory {
  THREAT_MODELING           // Threat modeling activities
  VULNERABILITY_ASSESSMENT  // Vulnerability scanning and assessment
  PENETRATION_TESTING      // Penetration testing activities
  CODE_REVIEW              // Security code review
  ARCHITECTURE_REVIEW      // Security architecture review
  COMPLIANCE_AUDIT         // Compliance and audit activities
  INCIDENT_RESPONSE        // Incident response and forensics
  SECURITY_TRAINING        // Security awareness and training
  RISK_ASSESSMENT          // Risk assessment activities
  SECURITY_MONITORING      // Security monitoring setup
}

enum Complexity {
  VERY_LOW    // 1-4 hours
  LOW         // 4-8 hours  
  MEDIUM      // 8-16 hours
  HIGH        // 16-32 hours
  VERY_HIGH   // 32+ hours
}

enum SecurityProjectStatus {
  NOT_STARTED     // Project created but not started
  IN_PROGRESS     // Currently being worked on
  BLOCKED         // Blocked by dependencies
  UNDER_REVIEW    // Under review/approval
  COMPLETED       // Successfully completed
  CANCELLED       // Cancelled before completion
  ON_HOLD         // Temporarily paused
}
