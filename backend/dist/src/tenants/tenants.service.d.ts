import { PrismaService } from '../prisma/prisma.service';
import { TenantFeaturesDto, UpdateTenantFeaturesDto } from './dto/tenant-features.dto';
import { CreateTenantDto, UpdateTenantDto, TenantResponseDto, TenantListDto, TenantStatsDto, TenantQueryDto } from './dto/tenant.dto';
import { ConfigService } from '@nestjs/config';
export declare class TenantsService {
    private prisma;
    private configService;
    private readonly logger;
    constructor(prisma: PrismaService, configService: ConfigService);
    createTenant(createTenantDto: CreateTenantDto): Promise<TenantResponseDto>;
    getTenants(query: TenantQueryDto): Promise<TenantListDto>;
    getTenantById(tenantId: string): Promise<TenantResponseDto>;
    updateTenant(tenantId: string, updateTenantDto: UpdateTenantDto): Promise<TenantResponseDto>;
    deleteTenant(tenantId: string): Promise<{
        message: string;
    }>;
    getTenantStats(tenantId: string): Promise<TenantStatsDto>;
    private mapTenantToResponseDto;
    getTenantFeatures(tenantId: string): Promise<TenantFeaturesDto>;
    updateTenantFeatures(tenantId: string, updateDto: UpdateTenantFeaturesDto): Promise<TenantFeaturesDto>;
    getTenantBySlug(slug: string): Promise<{
        plan: {
            id: string;
            name: import("@prisma/client").$Enums.PlanTier;
            displayName: string;
            description: string | null;
            price: import("@prisma/client/runtime/library").Decimal | null;
            currency: string;
            billingPeriod: string;
            maxUsers: number;
            maxProjects: number;
            maxThreatModels: number;
            storageLimit: number;
            isActive: boolean;
            isPublic: boolean;
            createdAt: Date;
            updatedAt: Date;
        } | null;
        configuration: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            settings: import("@prisma/client/runtime/library").JsonValue;
            tenantId: string;
            industryType: string;
            organizationType: string;
            productTerm: string;
            projectTerm: string;
            portfolioTerm: string;
            workstreamTerm: string;
            defaultHierarchy: import("@prisma/client/runtime/library").JsonValue;
            maxHierarchyLevels: number;
            securityFrameworks: string[];
            defaultRiskLevel: import("@prisma/client").$Enums.RiskLevel;
            theme: string;
            primaryColor: string;
            logoUrl: string | null;
            customCssUrl: string | null;
            requiresApproval: boolean;
            auditRetentionDays: number;
            encryptionRequired: boolean;
            ssoEnabled: boolean;
            adIntegrationEnabled: boolean;
            apiAccessEnabled: boolean;
            enableRegistration: boolean;
            enable2FA: boolean;
            enableLandingPage: boolean;
            enableDarkMode: boolean;
            ssoProvider: string | null;
            ssoClientId: string | null;
            ssoTenantId: string | null;
            ssoIssuerUrl: string | null;
            ssoMetadataUrl: string | null;
        } | null;
    } & {
        id: string;
        name: string;
        maxUsers: number | null;
        maxProjects: number | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        slug: string;
        domain: string | null;
        status: import("@prisma/client").$Enums.TenantStatus;
        isTrial: boolean;
        trialExpiresAt: Date | null;
        mfaRequired: boolean;
        passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
        sessionTimeout: number;
        complianceFrameworks: string[];
        dataResidency: string | null;
        apiQuotaDaily: number;
        webhookUrl: string | null;
        settings: import("@prisma/client/runtime/library").JsonValue;
        deletedAt: Date | null;
        planId: string | null;
    }>;
    private mapConfigToDto;
}
