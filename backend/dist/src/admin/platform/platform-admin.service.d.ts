import { PrismaService } from '../../prisma/prisma.service';
export declare class PlatformAdminService {
    private prisma;
    constructor(prisma: PrismaService);
    getAllTenants(page?: number, limit?: number): Promise<{
        tenants: ({
            _count: {
                users: number;
            };
        } & {
            id: string;
            name: string;
            maxUsers: number | null;
            maxProjects: number | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            slug: string;
            domain: string | null;
            status: import("@prisma/client").$Enums.TenantStatus;
            isTrial: boolean;
            trialExpiresAt: Date | null;
            mfaRequired: boolean;
            passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
            sessionTimeout: number;
            complianceFrameworks: string[];
            dataResidency: string | null;
            apiQuotaDaily: number;
            webhookUrl: string | null;
            settings: import("@prisma/client/runtime/library").JsonValue;
            deletedAt: Date | null;
            planId: string | null;
        })[];
        pagination: {
            total: number;
            page: number;
            limit: number;
            totalPages: number;
        };
    }>;
    createTenant(createTenantDto: any): Promise<{
        id: string;
        name: string;
        maxUsers: number | null;
        maxProjects: number | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        slug: string;
        domain: string | null;
        status: import("@prisma/client").$Enums.TenantStatus;
        isTrial: boolean;
        trialExpiresAt: Date | null;
        mfaRequired: boolean;
        passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
        sessionTimeout: number;
        complianceFrameworks: string[];
        dataResidency: string | null;
        apiQuotaDaily: number;
        webhookUrl: string | null;
        settings: import("@prisma/client/runtime/library").JsonValue;
        deletedAt: Date | null;
        planId: string | null;
    }>;
    suspendTenant(tenantId: string): Promise<{
        id: string;
        name: string;
        maxUsers: number | null;
        maxProjects: number | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        slug: string;
        domain: string | null;
        status: import("@prisma/client").$Enums.TenantStatus;
        isTrial: boolean;
        trialExpiresAt: Date | null;
        mfaRequired: boolean;
        passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
        sessionTimeout: number;
        complianceFrameworks: string[];
        dataResidency: string | null;
        apiQuotaDaily: number;
        webhookUrl: string | null;
        settings: import("@prisma/client/runtime/library").JsonValue;
        deletedAt: Date | null;
        planId: string | null;
    }>;
    activateTenant(tenantId: string): Promise<{
        id: string;
        name: string;
        maxUsers: number | null;
        maxProjects: number | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        slug: string;
        domain: string | null;
        status: import("@prisma/client").$Enums.TenantStatus;
        isTrial: boolean;
        trialExpiresAt: Date | null;
        mfaRequired: boolean;
        passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
        sessionTimeout: number;
        complianceFrameworks: string[];
        dataResidency: string | null;
        apiQuotaDaily: number;
        webhookUrl: string | null;
        settings: import("@prisma/client/runtime/library").JsonValue;
        deletedAt: Date | null;
        planId: string | null;
    }>;
    getSystemHealth(): Promise<{
        status: string;
        timestamp: string;
        database: string;
        uptime: number;
        memory: NodeJS.MemoryUsage;
        stats: {
            totalTenants: number;
            totalUsers: number;
            totalAuditLogs: number;
        };
        error?: undefined;
    } | {
        status: string;
        timestamp: string;
        error: any;
        database?: undefined;
        uptime?: undefined;
        memory?: undefined;
        stats?: undefined;
    }>;
    getSystemMetrics(): Promise<{
        tenants: (import("@prisma/client").Prisma.PickEnumerable<import("@prisma/client").Prisma.TenantGroupByOutputType, "status"[]> & {
            _count: number;
        })[];
        users: (import("@prisma/client").Prisma.PickEnumerable<import("@prisma/client").Prisma.UserGroupByOutputType, "role"[]> & {
            _count: number;
        })[];
        timestamp: string;
    }>;
    getAllUsers(page?: number, limit?: number): Promise<{
        users: ({
            tenant: {
                id: string;
                name: string;
                domain: string | null;
            };
        } & {
            id: string;
            name: string | null;
            displayName: string | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            status: import("@prisma/client").$Enums.UserStatus;
            deletedAt: Date | null;
            email: string;
            firstName: string;
            lastName: string;
            avatar: string | null;
            title: string | null;
            phone: string | null;
            password: string | null;
            passwordHash: string | null;
            isEmailVerified: boolean;
            isVerified: boolean;
            emailVerificationToken: string | null;
            passwordResetToken: string | null;
            passwordResetExpiresAt: Date | null;
            lastLoginAt: Date | null;
            lastLoginIp: string | null;
            failedLogins: number;
            failedLoginAttempts: number;
            lockedUntil: Date | null;
            passwordChangedAt: Date | null;
            role: import("@prisma/client").$Enums.UserRole;
            mfaEnabled: boolean;
            mfaSecret: string | null;
            mfaBackupCodes: string[];
            userType: import("@prisma/client").$Enums.UserType;
            preferences: import("@prisma/client/runtime/library").JsonValue;
            timezone: string;
            locale: string;
            tenantId: string;
            departmentId: string | null;
            orgUnitId: string | null;
        })[];
        pagination: {
            total: number;
            page: number;
            limit: number;
            totalPages: number;
        };
    }>;
    changeUserRole(userId: string, roleDto: any): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
}
