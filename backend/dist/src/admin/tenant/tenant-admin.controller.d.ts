import { TenantAdminService } from './tenant-admin.service';
export declare class TenantAdminController {
    private readonly tenantAdminService;
    constructor(tenantAdminService: TenantAdminService);
    getTenantUsers(user: any, page?: number, limit?: number): Promise<{
        users: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            firstName: string;
            lastName: string;
            lastLoginAt: Date | null;
            role: import("@prisma/client").$Enums.UserRole;
        }[];
        pagination: {
            total: number;
            page: number;
            limit: number;
            totalPages: number;
        };
    }>;
    createTenantUser(user: any, createUserDto: any): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    changeUserRole(user: any, userId: string, roleDto: any): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    changeUserStatus(user: any, userId: string, statusDto: any): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    getTenantSettings(user: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        domain: string | null;
        settings: import("@prisma/client/runtime/library").JsonValue;
    }>;
    updateTenantSettings(user: any, settingsDto: any): Promise<{
        id: string;
        name: string;
        maxUsers: number | null;
        maxProjects: number | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        slug: string;
        domain: string | null;
        status: import("@prisma/client").$Enums.TenantStatus;
        isTrial: boolean;
        trialExpiresAt: Date | null;
        mfaRequired: boolean;
        passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
        sessionTimeout: number;
        complianceFrameworks: string[];
        dataResidency: string | null;
        apiQuotaDaily: number;
        webhookUrl: string | null;
        settings: import("@prisma/client/runtime/library").JsonValue;
        deletedAt: Date | null;
        planId: string | null;
    }>;
    getDashboardStats(user: any): Promise<{
        users: {
            total: number;
            active: number;
            byRole: (import("@prisma/client").Prisma.PickEnumerable<import("@prisma/client").Prisma.UserGroupByOutputType, "role"[]> & {
                _count: number;
            })[];
        };
        recentActivity: {
            id: string;
            createdAt: Date;
            user: {
                email: string;
                firstName: string;
                lastName: string;
            } | null;
            userId: string | null;
            action: string;
        }[];
        timestamp: string;
    }>;
    getUserAnalytics(user: any): Promise<{
        userGrowth: number;
        loginActivity: number;
        period: string;
        timestamp: string;
    }>;
    getDepartments(user: any): Promise<{
        departments: never[];
        message: string;
    }>;
    createDepartment(user: any, deptDto: any): Promise<{
        department: null;
        message: string;
    }>;
}
