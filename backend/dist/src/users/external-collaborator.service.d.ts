import { PrismaService } from '../prisma/prisma.service';
import { UserRole } from '@prisma/client';
export interface CreateExternalCollaboratorDto {
    email: string;
    firstName: string;
    lastName: string;
    organizationName: string;
    role?: UserRole;
    projectIds?: string[];
    expiresAt?: Date;
}
export declare class ExternalCollaboratorService {
    private prisma;
    constructor(prisma: PrismaService);
    createExternalCollaborator(tenantId: string, collaboratorDto: CreateExternalCollaboratorDto): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    getExternalCollaborators(tenantId: string, filters?: any): Promise<({
        tenant: {
            id: string;
            name: string;
            maxUsers: number | null;
            maxProjects: number | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            slug: string;
            domain: string | null;
            status: import("@prisma/client").$Enums.TenantStatus;
            isTrial: boolean;
            trialExpiresAt: Date | null;
            mfaRequired: boolean;
            passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
            sessionTimeout: number;
            complianceFrameworks: string[];
            dataResidency: string | null;
            apiQuotaDaily: number;
            webhookUrl: string | null;
            settings: import("@prisma/client/runtime/library").JsonValue;
            deletedAt: Date | null;
            planId: string | null;
        };
    } & {
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    })[]>;
    inviteExternalCollaborator(tenantId: string, inviterId: string, collaboratorDto: CreateExternalCollaboratorDto): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    extendContract(tenantId: string, collaboratorId: string, extensionDto: {
        expiresAt: Date;
    }): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    revokeAccess(tenantId: string, collaboratorId: string): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    removeExternalCollaborator(tenantId: string, collaboratorId: string): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    updateCollaboratorRole(tenantId: string, collaboratorId: string, role: UserRole): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
}
