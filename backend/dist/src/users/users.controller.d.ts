import { UserRole } from '@prisma/client';
import { UsersService } from './users.service';
import { UserPermissionsService } from './user-permissions.service';
import { ExternalCollaboratorService } from './external-collaborator.service';
export declare class UsersController {
    private readonly usersService;
    private readonly permissionsService;
    private readonly collaboratorService;
    constructor(usersService: UsersService, permissionsService: UserPermissionsService, collaboratorService: ExternalCollaboratorService);
    getInternalUsers(user: any, department?: string, role?: UserRole, page?: number, limit?: number): Promise<({
        tenant: {
            id: string;
            name: string;
            maxUsers: number | null;
            maxProjects: number | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            slug: string;
            domain: string | null;
            status: import("@prisma/client").$Enums.TenantStatus;
            isTrial: boolean;
            trialExpiresAt: Date | null;
            mfaRequired: boolean;
            passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
            sessionTimeout: number;
            complianceFrameworks: string[];
            dataResidency: string | null;
            apiQuotaDaily: number;
            webhookUrl: string | null;
            settings: import("@prisma/client/runtime/library").JsonValue;
            deletedAt: Date | null;
            planId: string | null;
        };
        department: {
            id: string;
            name: string;
            description: string | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            parentId: string | null;
            costCenter: string | null;
            manager: string | null;
        } | null;
    } & {
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    })[]>;
    createInternalUser(user: any, createUserDto: any): Promise<import("./dto/user.dto").UserResponseDto>;
    getExternalCollaborators(user: any, status?: string, company?: string, page?: number, limit?: number): Promise<({
        tenant: {
            id: string;
            name: string;
            maxUsers: number | null;
            maxProjects: number | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            slug: string;
            domain: string | null;
            status: import("@prisma/client").$Enums.TenantStatus;
            isTrial: boolean;
            trialExpiresAt: Date | null;
            mfaRequired: boolean;
            passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
            sessionTimeout: number;
            complianceFrameworks: string[];
            dataResidency: string | null;
            apiQuotaDaily: number;
            webhookUrl: string | null;
            settings: import("@prisma/client/runtime/library").JsonValue;
            deletedAt: Date | null;
            planId: string | null;
        };
    } & {
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    })[]>;
    inviteExternalCollaborator(user: any, inviteDto: any): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    extendCollaboratorContract(user: any, userId: string, extensionDto: any): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    revokeCollaboratorAccess(user: any, userId: string): Promise<{
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    }>;
    getUserPermissions(user: any, userId: string): Promise<any>;
    updateUserPermissions(user: any, userId: string, permissionsDto: any): Promise<any>;
    getDepartmentUsers(user: any, department: string, includeExternal?: boolean): Promise<({
        tenant: {
            id: string;
            name: string;
            maxUsers: number | null;
            maxProjects: number | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            slug: string;
            domain: string | null;
            status: import("@prisma/client").$Enums.TenantStatus;
            isTrial: boolean;
            trialExpiresAt: Date | null;
            mfaRequired: boolean;
            passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
            sessionTimeout: number;
            complianceFrameworks: string[];
            dataResidency: string | null;
            apiQuotaDaily: number;
            webhookUrl: string | null;
            settings: import("@prisma/client/runtime/library").JsonValue;
            deletedAt: Date | null;
            planId: string | null;
        };
        department: {
            id: string;
            name: string;
            description: string | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            parentId: string | null;
            costCenter: string | null;
            manager: string | null;
        } | null;
    } & {
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    })[]>;
    getUsersByRole(user: any, role: UserRole): Promise<({
        tenant: {
            id: string;
            name: string;
            maxUsers: number | null;
            maxProjects: number | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            slug: string;
            domain: string | null;
            status: import("@prisma/client").$Enums.TenantStatus;
            isTrial: boolean;
            trialExpiresAt: Date | null;
            mfaRequired: boolean;
            passwordPolicy: import("@prisma/client/runtime/library").JsonValue;
            sessionTimeout: number;
            complianceFrameworks: string[];
            dataResidency: string | null;
            apiQuotaDaily: number;
            webhookUrl: string | null;
            settings: import("@prisma/client/runtime/library").JsonValue;
            deletedAt: Date | null;
            planId: string | null;
        };
        department: {
            id: string;
            name: string;
            description: string | null;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            tenantId: string;
            parentId: string | null;
            costCenter: string | null;
            manager: string | null;
        } | null;
    } & {
        id: string;
        name: string | null;
        displayName: string | null;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        status: import("@prisma/client").$Enums.UserStatus;
        deletedAt: Date | null;
        email: string;
        firstName: string;
        lastName: string;
        avatar: string | null;
        title: string | null;
        phone: string | null;
        password: string | null;
        passwordHash: string | null;
        isEmailVerified: boolean;
        isVerified: boolean;
        emailVerificationToken: string | null;
        passwordResetToken: string | null;
        passwordResetExpiresAt: Date | null;
        lastLoginAt: Date | null;
        lastLoginIp: string | null;
        failedLogins: number;
        failedLoginAttempts: number;
        lockedUntil: Date | null;
        passwordChangedAt: Date | null;
        role: import("@prisma/client").$Enums.UserRole;
        mfaEnabled: boolean;
        mfaSecret: string | null;
        mfaBackupCodes: string[];
        userType: import("@prisma/client").$Enums.UserType;
        preferences: import("@prisma/client/runtime/library").JsonValue;
        timezone: string;
        locale: string;
        tenantId: string;
        departmentId: string | null;
        orgUnitId: string | null;
    })[]>;
    activateUser(user: any, userId: string): Promise<import("./dto/user.dto").UserResponseDto>;
    deactivateUser(user: any, userId: string): Promise<import("./dto/user.dto").UserResponseDto>;
    getUserAnalyticsOverview(user: any): Promise<{
        totalUsers: number;
        activeUsers: number;
        inactiveUsers: number;
        usersByRole: (import("@prisma/client").Prisma.PickEnumerable<import("@prisma/client").Prisma.UserGroupByOutputType, "role"[]> & {
            _count: number;
        })[];
        usersByType: (import("@prisma/client").Prisma.PickEnumerable<import("@prisma/client").Prisma.UserGroupByOutputType, "userType"[]> & {
            _count: number;
        })[];
    }>;
}
